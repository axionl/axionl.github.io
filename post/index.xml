<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 初等記憶體</title><link>https://axionl.me/post/</link><description>Recent content in Posts on 初等記憶體</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Apr 2021 17:32:39 +0800</lastBuildDate><atom:link href="https://axionl.me/post/index.xml" rel="self" type="application/rss+xml"/><item><title>The Wayland Protocol</title><link>https://axionl.me/p/the-wayland-protocol/</link><pubDate>Sat, 24 Apr 2021 17:32:39 +0800</pubDate><guid>https://axionl.me/p/the-wayland-protocol/</guid><description>最近还在填坑 &amp;ldquo;The Wayland Protocol&amp;rdquo; 这本书的翻译，由于内容比较独立，所以用 mdbook 单独构建了一份文档页。目前最大的个感受是其设计模式上和 grpc 有异曲同工之妙，等全篇完工后在博客简要介绍一下，希望不咕。
文档地址：wayland.axionl.me</description></item><item><title>Linux 用户环境变量设置</title><link>https://axionl.me/p/linux-%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</link><pubDate>Tue, 23 Feb 2021 20:35:26 +0800</pubDate><guid>https://axionl.me/p/linux-%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</guid><description>序言 Linux 下的用户环境变量配置常显得十分琐碎，如 .xprofile、.pam_environment 亦或是各种 shell 配置文件。
.xprofile 受限于 x11 服务，在 wayland 或未启动图形界面等情况下不会被读取。 .pam_environment 由于提权漏洞频出（如：CVE-2010-4708、CVE-2011-3148），已经被上游遗弃，一些发行版为了兼容老的用户配置，在 /etc/pam.d/system-login 中临时加入 session required pam_env.so user_readenv=1 以恢复读取该文件中环境变量的行为，并非长久之计。 参考了依云的 Linux 的环境变量怎么设 一文，遂选用 systemd 的 environment.d 作为用户环境变量配置方案。
介绍 配置文件目录如下：
~/.config/environment.d/*.conf [✓] /run/environment.d/*.conf /etc/environment.d/*.conf /usr/lib/environment.d/*.conf /etc/environment 其写法如下：
环境变量=值 环境变量=${值:-如果为空的默认值} 环境变量=${值:+添加值} 可以读取 $HOME, $PATH 等原有的环境变量，如：PATH=~/.local/bin:$PATH apps.conf
由于我是 fish + tmux 用户，需要自己导出一下生成的环境变量文件到命令行。
~/.config/fish/conf.d/env_init.fish
if not contains $USER $PATH export (/usr/lib/systemd/user-environment-generators/30-systemd-environment-d-generator) end show environments</description></item><item><title>[归档] 用 Chezmoi 管理配置文件</title><link>https://axionl.me/p/%E5%BD%92%E6%A1%A3-%E7%94%A8-chezmoi-%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Fri, 29 Jan 2021 10:04:51 +0800</pubDate><guid>https://axionl.me/p/%E5%BD%92%E6%A1%A3-%E7%94%A8-chezmoi-%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>前言 项目地址：twpayne/chezmoi
早前看了 Farseerfc 老师这篇译文，开始用 Stow 打理自己家目录中的配置文件，其实现非常简单直接：在一个特定的目录保留原始配置文件，并在其原本对应的位置创建软链接。
【譯】使用 GNU stow 管理你的點文件
相比之下，其有如下缺点促使我切换到 Chezmoi:
需要手动创建目录结构，而不是根据现有配置文件来生成 需要手动建立版本管理，本身不提供备份和恢复等功能 2.3.0 版本加入了隐藏文件显式命名的方案，但还是需要手动添加 dot- 前缀 隐私数据加密 安装 https://www.chezmoi.io/docs/install/
多数包管理器可以搜索到此包进行安装，包括 Linux、BSD、macOS、Windows 在内的多种平台。
$ curl -sfL https://git.io/chezmoi | sh 快速上手 初始化 $ chezmoi init --apply 这会在 ~/.local/share/chezmoi 中创建一个目录权限为 700 的 git 仓库，用于保存配置文件。
$ chezmoi source-path 可以列出其路径 $ chezmoi cd 可以直接进入到该目录 --apply 参数意为仓库创建后自动添加配置文件，默认为不创建 $ chezmoi init &amp;lt;git_repo&amp;gt; 可在新设备上初始化上传的配置仓库 若包管理器未安装自动补全，则可由下例所示，添加到 &amp;lt;bash/zsh/fish/powershell&amp;gt; 配置当中。</description></item><item><title>[归档] Hello, My Firefox</title><link>https://axionl.me/p/%E5%BD%92%E6%A1%A3-hello-my-firefox/</link><pubDate>Wed, 27 Jan 2021 16:24:43 +0800</pubDate><guid>https://axionl.me/p/%E5%BD%92%E6%A1%A3-hello-my-firefox/</guid><description>自用配置项，持续更新中&amp;hellip;&amp;hellip;
选项 允许加载用户样式文件（userChrome.css） toolkit.legacyUserProfileCustomizations.stylesheets = true 调整浏览器标签宽度 browser.tabs.tabClipWidth = 83 硬件加速 media.ffmpeg.vaapi.enabled = true media.ffvpx.enabled = false 配合系统环境变量使用 MOZ_X11_EGL=1 或 MOZ_ENABLE_WAYLAND=1，MOZ_WEBRENDER=1
Devtools devtools.editor.tabsize = 4 devtools.debugger.remote-enabled = true DevTools 中还有 Enable browser chrome and add-on debugging toolboxes 可以打开，调试扩展常用选项
易用模式 accessibility.typeaheadfind.enablesound = false 默认开了这个选项，导致 Ctrl+F 搜索不到结果的时候笔记本的蜂鸣器会吼得很大声
主题 MaterialFox
扩展 Tree Style Tab
TST Preview</description></item><item><title>在 QEMU/KVM 虚拟机上安装 NixOS 发行版</title><link>https://axionl.me/p/%E5%9C%A8-qemu/kvm-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85-nixos-%E5%8F%91%E8%A1%8C%E7%89%88/</link><pubDate>Thu, 07 Jan 2021 22:57:51 +0800</pubDate><guid>https://axionl.me/p/%E5%9C%A8-qemu/kvm-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85-nixos-%E5%8F%91%E8%A1%8C%E7%89%88/</guid><description>前言 2019 年 1 月的时候知道了这个发行版，当时 @NixOS_zh 群刚建立（后来这群凉了），就开虚拟机玩了一下，时隔多年发现又有不少人对其颇感兴趣，便决定重新写一下安装相关的教程。
本文以 Arch Linux 作为宿主机，大体步骤与 Arch Wiki 相近
QEMU/KVM 虚拟机配置 ArchLinux Wiki: KVM | QEMU | Libvirt
0. 检测硬件是否支持 KVM 一般情况下需要进入到 BIOS 对应页面打开虚拟化支持，常见对应设置项如下：
AMD: SVM Support Intel: Intel Virtual Technology 开启虚拟化后在宿主机上用命令行检测（比如我的是 AMD 的处理器）：
$ LC_ALL=C lscpu | grep Virtualization Virtualization: AMD-V 内核支持检测，如果使用的是 ArchLinux 提供的官方内核，即 core/linux 则已经包含了对应的 kvm 模块（kvm、kvm_amd或kvm_intel）:
$ zgrep CONFIG_KVM /proc/config.gz CONFIG_KVM_GUEST=y CONFIG_KVM_MMIO=y CONFIG_KVM_ASYNC_PF=y CONFIG_KVM_VFIO=y CONFIG_KVM_GENERIC_DIRTYLOG_READ_PROTECT=y CONFIG_KVM_COMPAT=y CONFIG_KVM_XFER_TO_GUEST_WORK=y CONFIG_KVM=m CONFIG_KVM_INTEL=m CONFIG_KVM_AMD=m # 可以看到有该模块 CONFIG_KVM_AMD_SEV=y CONFIG_KVM_MMU_AUDIT=y 查看这些内核模块是否已自动加载：</description></item><item><title>Protocol Buffers 和 gRPC（一）</title><link>https://axionl.me/p/protocol-buffers-%E5%92%8C-grpc%E4%B8%80/</link><pubDate>Sun, 03 Jan 2021 23:46:51 +0800</pubDate><guid>https://axionl.me/p/protocol-buffers-%E5%92%8C-grpc%E4%B8%80/</guid><description>前言 官方网站
gRPC Protocol Buffers 通俗易懂的说明 introduction
以宽泛的概念来说就是找到一种公共的中间体，以达到两者“交流”的目的。
有点复杂的介绍 RPC(Remote Procedure Call) 远程过程调用，可简单理解为远程的程间通讯。gRPC 是 Google 所实现的一个开源框架，Protocol Buffers 是用于通信的数据载体格式，有着高压缩率（序列化后）、跨平台、多语言等优点。
虽然定义上是远程通讯，但扩展到仅本地使用就成了一种形式上的程间通讯。gRPC 通过网络栈实现这一过程，而 Apache Thrift 则包含了网络、命名管道、内存共享等多种数据交换形式，留作以后介绍和对比。通过序列化工具 (Protocol Buffers) 在节省带宽和减少传输时间的基础上，又能够轻易还原回原本的结构数据，便于多语言开发，部分软件也以此作为其 API 暴露方式，如 v2ray 等。
流程示意图
一个简单的例子 以一个消息内容为空的协议为例子，仅用于确认发送和响应。对于 golang 或者 java 等语言来说 proto3 支持以 option 的方式产生适合其代码引入的包封装 (详见)。
公共协议 syntax = &amp;#34;proto3&amp;#34;;option go_package = &amp;#34;example.com/user/grpcGoExample&amp;#34;message HelloMessage {} // 公共消息体，未包含任何字段 /* 通讯服务声明，类似于我们常说的接口 */service Greeter { rpc SayHello(HelloMessage) returns (HelloMessage);} golang 客户端 import ( .</description></item><item><title>[归档] SmartDNS 一个智能分流的 DNS 服务</title><link>https://axionl.me/p/%E5%BD%92%E6%A1%A3-smartdns-%E4%B8%80%E4%B8%AA%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81%E7%9A%84-dns-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 02 Jan 2021 09:41:20 +0800</pubDate><guid>https://axionl.me/p/%E5%BD%92%E6%A1%A3-smartdns-%E4%B8%80%E4%B8%AA%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81%E7%9A%84-dns-%E6%9C%8D%E5%8A%A1/</guid><description>介绍 项目地址
DNS 域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。通常情况下本地的解析请求会发送到离你最近的 DNS 服务器，它可能是你的无线路由器、宿舍楼梯下的服务器或者运营商的地区性服务器等，但由于各种原因导致解析效果不理想，延迟高等问题，这时可以考虑换一个网络质量好的域名解析服务，错峰出行，减少拥堵。
SmartDNS SmartDNS 集成了多种出栈请求协议，包括常用的 UDP 和较为现代的 DNS-Over-Https 等，能够在给定的规则列表中挑选出一个延迟最低的域名解析服务，并向其发送请求。同时其内部也提供 DNS 缓存，如果缓存能够命中则直接从本地缓存中返回对应 IP 地址，如未能查找到则继续向上级 DNS 服务传播请求。
配置 默认配置文件
推荐项目：dnsmasq-china-list
作者肥猫在其项目中提供了几个较为常用的匹配规则列表，对于非 Arch Linux 用户而言可以把项目克隆到本地然后构建对应的配置文件，而 Arch 用户可以从 CN 源 里安装 smartdns-china-list-git 以获取自动更新。
生成对应的配置文件操作如下，具体参考，可见其生成形式为 nameserver /&amp;lt;域名&amp;gt;/&amp;lt;组名&amp;gt;，后面的组名就是对应我们后来需要的匹配规则而制定的。
$ cd dnsmasq-china-list $ make smartdns SERVER=china 默认的配置文件中有很多不常用的项目，作为自己的配置文件一般精简到自己需要的功能配置即可。
# （可选）引入额外的规则列表，用绝对路径conf-file /etc/smartdns/accelerated-domains.china.smartdns.confconf-file /etc/smartdns/apple.china.smartdns.confconf-file /etc/smartdns/google.china.smartdns.conf# 本地监听端口bind [::]:53# 缓存大小cache-size 4096# 重启时读取之前的缓存cache-persist yes# 缓存文件存放位置cache-file /var/cache/smartdns.cache# 传统 UDP 协议（以阿里 DNS 为例）server 223.</description></item><item><title>[新手篇] 如何写一个简单的上膛机器人</title><link>https://axionl.me/p/%E6%96%B0%E6%89%8B%E7%AF%87-%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%8A%E8%86%9B%E6%9C%BA%E5%99%A8%E4%BA%BA/</link><pubDate>Thu, 31 Dec 2020 17:26:38 +0800</pubDate><guid>https://axionl.me/p/%E6%96%B0%E6%89%8B%E7%AF%87-%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%8A%E8%86%9B%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid><description>介绍 一个检测关键词并自动回复表情包的 Telegram 机器人。
开发 注册一个机器人 访问 Telegram 的官方注册机器人 @BotFather 。
使用 /newbot 命令创建一个新的机器人。它会询问你所要创建机器人的名字 (nickname) 和用户名 (username, 以_bot结尾)，注册成功后会将机器人的 TOKEN 返回给你，而这个 TOKEN 用于告知服务器这个机器人就是（大明湖畔那个夏雨荷）对应注册的机器人。
botfather
... Use this token to access the HTTP API: `&amp;lt;1145141919810:TheWholeSentenceIsToken&amp;gt;` Keep your token secure and store it safely, ... 安装 Python 环境 官方网站: https://www.python.org/downloads
对于绝大多数 Linux 发行版来说从其自己的包管理器中安装 Python 即可（2021 年了应该都默认 Python3?)
Windows 则 Python 官方提供了安装器，记得把 Python 加到环境变量 (PATH) 的框给勾选上。</description></item><item><title>Teleport 小记</title><link>https://axionl.me/p/teleport-%E5%B0%8F%E8%AE%B0/</link><pubDate>Sun, 06 Dec 2020 23:04:45 +0800</pubDate><guid>https://axionl.me/p/teleport-%E5%B0%8F%E8%AE%B0/</guid><description>简介 常用于跨平台集群管理，提供多设备认证、远程操作和反向代理。
项目地址：github.com/gravitational/teleport
官方网站：goteleport.com
安装 有以下几种方式，单个可执行文件内已经包含 web 管理平台、服务端和客户端功能。(Windows 目前仅支持客户端)
可执行文件下载 Docker 下载 编译安装 快速配置 服务端及 Web 管理平台 teleport:data_dir:/var/lib/teleport# 数据存放目录auth_service:enabled:truecluster_name:&amp;#34;demo_cluster&amp;#34;listen_addr:0.0.0.0:3025# 认证监听地址tokens:- proxy,node,app:&amp;lt;nodes_auth_token&amp;gt;# 节点认证密令ssh_service:enabled:truelabels:env:stagingapp_service:enabled:truedebug_app:falseproxy_service:enabled:truelisten_addr:0.0.0.0:3023# 反向代理监听地址web_listen_addr:0.0.0.0:3080# web 管理页面地址tunnel_listen_addr:0.0.0.0:3024# 隧道监听地址public_addr:&amp;lt;https://example.domain.org:3025&amp;gt;# 反向代理公共地址https_keypairs:# 本地测试时可不设置证书- key_file:&amp;lt;key_file_path&amp;gt;- cert_file:&amp;lt;cert_file_path&amp;gt;可由如下命令启用服务端进行测试，要点如下:
在本地测试时即便没有填写 https_keypairs 也仍然需要在监听的 web 地址前面加上 https://，或者使用 --insecure-no-tls 命令行参数对 http:// 进行访问。 如果配置中含有非对应权限目录或者证书文件，则调整到对应权限，如 /var/lib/teleport 仅限 root 权限访问，则需要调整到对应的权限再启动命令。 所有的登陆行文均在 web_listen_addr 所指示的地址发生。 注意证书所对应的域名与可访问的相同 $ teleport start --config teleport.yaml tctl 是 teleport 的一个命令行管理工具，在 teleport 服务运行时，可以由它对用户、节点、密令等进行动态管理。
# 创建一个初始用户 $ tctl users add &amp;lt;username&amp;gt; &amp;lt;login_user, login_group&amp;gt; --config teleport.</description></item></channel></rss>